<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hta2405.unite.mybatis.mapper.BoardPostMapper">
    <select id="getBoardListByDeptId" parameterType="Long" resultType="com.hta2405.unite.dto.BoardHomeDeptDTO">
        SELECT *
        FROM board
        WHERE (dept_id != 0)
          AND (
            #{deptId} IN (0000, 1000, 1001)
                OR (#{deptId} = 1100 AND dept_id BETWEEN 1100 AND 1199)
                OR (#{deptId} = 1200 AND dept_id BETWEEN 1200 AND 1299)
                OR (#{deptId} = 1300 AND dept_id BETWEEN 1300 AND 1399)
                OR (#{deptId} = 1400 AND dept_id BETWEEN 1400 AND 1499)
                OR (dept_id = #{deptId})
            )
    </select>

    <select id="getBoardListByName1" parameterType="String" resultType="Board">
        select *
        from board
        where board_name1 = #{boardName1}
    </select>

    <select id="getBoardListAll" parameterType="Long" resultType="com.hta2405.unite.dto.BoardPostEmpDTO">
        select post.*,
               board.*,
               IFNULL(postCommentCnt, 0) as postCommentCnt,
               emp.ename,
               emp.img_path,
               emp.img_original,
               emp.img_uuid,
               emp.img_type
        from post
                 left join (select post_id, count(*) as postCommentCnt
                            from post_comment
                            group by post_id) pc on post.post_id = pc.post_id
                 join board on board.board_id = post.board_id
                 join emp on emp.emp_id = post.post_writer
        where board.dept_id = 0
           or #{deptId} in (0000, 1000, 1001)
           or (#{deptId} = 1100 and board.dept_id between 1100 and 1199)
           or (#{deptId} = 1200 and board.dept_id between 1200 and 1299)
           or (#{deptId} = 1300 and board.dept_id between 1300 and 1399)
           or (#{deptId} = 1400 and board.dept_id between 1400 and 1499)
           or board.dept_id = #{deptId}
        order by post_date desc
    </select>

    <select id="findBoardIdByName1Name2" resultType="long">
        SELECT BOARD_ID
        FROM board
        WHERE BOARD_NAME1 = #{boardName1}
          And BOARD_NAME2 = #{boardName2}
    </select>

    <select id="findBoardByBoardId" resultType="Board">
        SELECT *
        FROM board
        WHERE BOARD_ID = #{boardId}
    </select>

    <insert id="insertPost" parameterType="Post" useGeneratedKeys="true" keyProperty="postId">
        INSERT INTO post (BOARD_ID, POST_WRITER, POST_SUBJECT, POST_CONTENT,
                          POST_DATE, POST_UPDATE_DATE, POST_RE_REF, POST_RE_LEV, POST_RE_SEQ)
        VALUES (#{boardId}, #{postWriter}, #{postSubject}, #{postContent},
                sysdate(), sysdate(), -1, 0, 0)
    </insert>
    <update id="refUpdate" parameterType="Long">
        UPDATE post
        SET post_re_ref = #{postId}
        WHERE post_id = #{postId}
    </update>

    <insert id="insertPostFile">
        INSERT INTO post_file (
        POST_FILE_PATH,
        POST_FILE_ORIGINAL,
        POST_FILE_UUID,
        POST_FILE_TYPE,
        POST_ID
        )
        VALUES
        <foreach collection="list" item="postFile" separator=",">
            (#{postFile.filePath},
            #{postFile.fileOriginal},
            #{postFile.fileUUID},
            #{postFile.fileType},
            #{postId})
        </foreach>
    </insert>

    <select id="getListCountByBoardId" parameterType="Long" resultType="int">
        SELECT COUNT(*)
        FROM post
        WHERE board_id = #{boardId}
    </select>

    <select id="getPostListByBoardId" parameterType="map" resultType="Post">
        <![CDATA[
        SELECT *
        FROM (SELECT post.*, IFNULL(post_comment_cnt, 0) AS post_comment_cnt
              FROM post
                       LEFT OUTER JOIN (SELECT post_id, COUNT(*) AS post_comment_cnt
                                        FROM post_comment
                                        GROUP BY post_id) pc ON post.post_id = pc.post_id
              WHERE board_id = #{boardId}
              ORDER BY post_re_ref DESC, post_re_seq ASC
                  LIMIT #{startRow}, #{endRow} -- OFFSET, LIMIT 방식으로 수정
             ) j;
        ]]>
    </select>

    <select id="getSearchListCountByBoardId" resultType="int">
        <choose>
            <!-- '작성자'로 검색하는 경우 -->
            <when test="category == '작성자'">
                SELECT COUNT(*)
                FROM post
                WHERE post_writer IN (
                SELECT emp_id
                FROM emp
                WHERE ename LIKE CONCAT('%', #{query}, '%')
                )
                AND board_id = #{boardId}
            </when>

            <!-- '제목' 또는 '내용'으로 검색하는 경우 -->
            <otherwise>
                SELECT COUNT(*)
                FROM post
                WHERE
                <choose>
                    <when test="category == '제목'">post_subject</when>
                    <when test="category == '내용'">post_content</when>
                </choose>
                LIKE CONCAT('%', #{query}, '%')
                AND board_id = #{boardId}
            </otherwise>
        </choose>
    </select>

    <!-- 게시판별 검색 게시글 목록 -->
    <select id="getSearchListByBoardId" resultType="Post">
        SELECT post.*, IFNULL(pc.cnt, 0) AS postCommentCnt
        FROM post
        LEFT JOIN (
        SELECT post_id, COUNT(*) AS cnt
        FROM post_comment
        GROUP BY post_id
        ) pc ON post.post_id = pc.post_id
        WHERE board_id = #{boardId}
        AND
        <choose>
            <!-- '제목'으로 검색 -->
            <when test="category == '제목'">
                post_subject LIKE CONCAT('%', #{query}, '%')
            </when>

            <!-- '내용'으로 검색 -->
            <when test="category == '내용'">
                post_content LIKE CONCAT('%', #{query}, '%')
            </when>

            <!-- '작성자'로 검색 -->
            <otherwise>
                post_writer IN (
                SELECT emp_id
                FROM emp
                WHERE ename LIKE CONCAT('%', #{query}, '%')
                )
            </otherwise>
        </choose>
        ORDER BY post_re_ref DESC, post_re_seq ASC
        LIMIT #{startRow}, #{endRow}
    </select>

    <update id="setReadCountUpdate">
        UPDATE post
        SET post_view = post_view + 1
        WHERE post_id = #{postId}
    </update>

    <select id="getDetail" resultType="com.hta2405.unite.dto.PostDetailDTO">
        SELECT post.*,
               COALESCE(pc.cnt, 0) AS cnt,
               emp.img_path,
               emp.img_original,
               emp.img_uuid,
               emp.img_type
        FROM post
                 LEFT JOIN (SELECT post_id,
                                   COUNT(*) AS cnt
                            FROM post_comment
                            GROUP BY post_id) pc ON post.post_id = pc.post_id
                 JOIN emp ON emp.emp_id = post.post_writer
        WHERE post.post_id = #{postId}
    </select>

    <select id="getDetailPostFile" resultType="PostFile">
        SELECT *
        FROM post_file
        WHERE post_id = #{postId}
    </select>

    <select id="getPostFile" resultType="PostFile">
        SELECT *
        FROM post_file
        WHERE post_file_id = #{postFileId}
    </select>

    <update id="updatePost">
        UPDATE post
        SET board_id         = #{boardId},
            post_subject     = #{postSubject},
            post_content     = #{postContent},
            post_update_date = sysdate()
        WHERE post_id = #{postId}
    </update>

    <delete id="deletePostFile">
        DELETE FROM post_file
        WHERE post_file_uuid IN
        <foreach collection="deletePostFileUUIDList" item="uuid" open="(" separator="," close=")">
            #{uuid}
        </foreach>
    </delete>

    <select id="selectPostInfo" resultType="map">
        SELECT *
        FROM post
        WHERE post_id = #{postId}
    </select>

    <!-- 게시글 삭제 -->
    <delete id="deletePost">
        <![CDATA[
        DELETE
        FROM post
        WHERE post_re_ref = #{postReRef}
          AND post_re_lev >= #{postReLev}
          AND post_re_seq >= #{postReSeq}
          AND post_re_seq <= (SELECT seq_boundary
                              FROM (SELECT IFNULL(
                                                   (SELECT MIN(post_re_seq) - 1
                                                    FROM post as post1
                                                    WHERE post1.post_re_ref = #{postReRef}
                                                      AND post1.post_re_lev = #{postReLev}
                                                      AND post1.post_re_seq
                                                        > #{postReSeq}),
                                                   (SELECT MAX(post_re_seq)
                                                    FROM post as post2
                                                    WHERE post2.post_re_ref = #{postReRef})
                                           ) AS seq_boundary) AS temp)
        ]]>
    </delete>

    <update id="updateReplySeq">
        UPDATE post
        SET post_re_seq = post_re_seq + 1
        WHERE post_re_ref = #{postReRef}
          AND post_re_seq > #{postReSeq}
    </update>

    <insert id="replyPostInsert" useGeneratedKeys="true" keyProperty="postId">
        INSERT INTO post (BOARD_ID, POST_WRITER, POST_SUBJECT, POST_CONTENT,
                          POST_DATE, POST_UPDATE_DATE, POST_RE_REF, POST_RE_LEV, POST_RE_SEQ)
        VALUES (#{boardId}, #{postWriter}, #{postSubject}, #{postContent},
                NOW(), NOW(), #{postReRef}, #{postReLev} + 1, #{postReSeq} + 1)
    </insert>

    <select id="getBoardNames" resultType="Board">
        SELECT board_name1, board_name2
        FROM board
    </select>

    <select id="getBoardNamesByDeptId" parameterType="Long" resultType="Board">
        SELECT board_name1, board_name2
        FROM board
        WHERE board.dept_id = 0
           or #{deptId} in (0000, 1000, 1001)
           or (#{deptId} = 1100 and board.dept_id between 1100 and 1199)
           or (#{deptId} = 1200 and board.dept_id between 1200 and 1299)
           or (#{deptId} = 1300 and board.dept_id between 1300 and 1399)
           or (#{deptId} = 1400 and board.dept_id between 1400 and 1499)
           or (board.dept_id = #{deptId})
    </select>

    <insert id="createBoard" parameterType="Board" useGeneratedKeys="true" keyProperty="boardId">
        insert into board (board_name1, board_name2, dept_id)
        values (#{boardName1}, #{boardName2}, #{deptId})
    </insert>
    <insert id="insertBoardManagement" parameterType="Long">
        insert into board_management (board_id, board_manager)
        values
        <foreach collection="managerIdList" item="managerId" separator=",">
            (#{boardId}, #{managerId})
        </foreach>
    </insert>

    <select id="getBoardAndManagement" resultType="com.hta2405.unite.dto.BoardAndManagementDTO">
        select board_management.board_id, board_name1, board_name2, board_manager
        from board
        natural join board_management
        <where>
            <if test="boardId != null">
                board_management.board_id = #{boardId}
            </if>
        </where>
    </select>

    <update id="updateBoard" parameterType="Board">
        update board
        set board_name1 = #{boardName1},
            board_name2 = #{boardName2}
        where board_id = #{boardId}
    </update>

    <delete id="deleteBoardManagement" parameterType="Long">
        delete
        from board_management
        where board_id = #{boardId}
    </delete>

    <select id="findBoardManagerById" parameterType="Long">
        select board_manager
        from board_management
        where board_id = #{boardId}
    </select>

    <delete id="deleteBoard">
        delete
        from board
        where board_id = #{boardId}
    </delete>

</mapper>