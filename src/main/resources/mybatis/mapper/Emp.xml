<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hta2405.unite.mybatis.mapper.EmpMapper">
    <select id="getEmpById" parameterType="String">
        SELECT *
        FROM emp
        WHERE EMP_ID = #{empId}
    </select>

    <insert id="insertEmp" parameterType="Emp">
        INSERT INTO emp(emp_id, password, ename, role, dept_id, job_id, gender, email, tel, mobile,
                        mobile2, img_path, img_original, img_uuid, img_type, hiredate, hiretype,
                        birthday, birthday_type, school, major, bank, account, address, married,
                        child, etype, vacation_count, hired)
        VALUES (#{empId},
                #{password},
                #{ename},
                #{role},
                #{deptId},
                #{jobId},
                #{gender},
                #{email},
                #{tel},
                #{mobile},
                #{mobile2},
                #{imgPath},
                #{imgOriginal},
                #{imgUUID},
                #{imgType},
                #{hireDate},
                #{hireType},
                #{birthday},
                #{birthdayType},
                #{school},
                #{major},
                #{bank},
                #{account},
                #{address},
                #{married},
                #{child},
                #{etype},
                #{vacationCount},
                1)
    </insert>
    <update id="updateEmp" parameterType="Emp">
        update emp
        set password       = #{password},
            ename          = #{ename},
            role           = #{role},
            dept_id        = #{deptId},
            job_id         = #{jobId},
            gender         = #{gender},
            email          = #{email},
            tel            = #{tel},
            mobile         = #{mobile},
            mobile2        = #{mobile2},
            img_path       = #{imgPath},
            img_original   = #{imgOriginal},
            img_uuid       = #{imgUUID},
            img_type       = #{imgType},
            hiredate       = #{hireDate},
            hiretype       = #{hireType},
            birthday       = #{birthday},
            birthday_type  = #{birthdayType},
            school         = #{school},
            major          = #{major},
            bank           = #{bank},
            account        = #{account},
            address        = #{address},
            married        = #{married},
            child          = #{child},
            etype          = #{etype},
            vacation_count = #{vacationCount},
            hired          = #{hired}
        where emp_id = #{empId}
    </update>
    <update id="resignEmp">
        update emp
        set hired = 0
        where emp_id = #{empId}
    </update>
    <select id="getImgOriginal" resultType="String">
        SELECT IMG_ORIGINAL
        FROM emp
        WHERE IMG_UUID = #{fileUUID}
    </select>
    <select id="getHiredEmpListByDeptId">
        SELECT e.emp_id, e.ename, d.dept_name, j.job_name, j.job_id, e.email, e.tel, e.mobile
        FROM emp e
                 join job j on e.job_id = j.job_id
                 join dept d on e.dept_id = d.dept_id
        WHERE e.dept_id = #{deptId}
          and e.emp_id != 'admin'
          and e.hired = 1
        order by e.job_id, e.emp_id
    </select>
    <select id="getAllEmpListDTO">
        SELECT e.emp_id, e.ename, d.dept_name, j.job_name, j.job_id, e.email, e.tel, e.mobile
        FROM emp e
                 join job j on e.job_id = j.job_id
                 join dept d on e.dept_id = d.dept_id
        WHERE e.emp_id != 'admin'
          and e.hired = 1
        order by e.job_id, e.emp_id
    </select>
    <select id="getHiredEmpListByName">
        SELECT e.emp_id, e.ename, d.dept_name, j.job_name, j.job_id, e.email, e.tel, e.mobile
        FROM emp e
                 join job j on e.job_id = j.job_id
                 join dept d on e.dept_id = d.dept_id
        WHERE e.ename like #{ename}
          and e.emp_id != 'admin'
          and e.hired = 1
        order by e.job_id, e.emp_id
    </select>
    <select id="getHiredEmpListDTO">
        select e.emp_id, e.ename, d.dept_name, j.job_name, j.job_id, e.email, e.tel, e.mobile
        from emp e join dept d on e.dept_id = d.dept_id
        join job j on e.job_id = j.job_id
        where d.dept_id in
        <foreach collection="list" item="item" open="(" separator="," close=")">
            #{item.deptId}
        </foreach>
        and e.hired = 1 and e.role != 'ROLE_ADMIN'
        order by e.job_id, e.emp_id
    </select>

    <select id="getIdToENameMap" resultType="map">
        SELECT emp_id, ename
        FROM emp
    </select>
    <update id="changePassword">
        update emp set password = #{encodedPassword}
        where emp_id = #{empId}
    </update>
    <select id="findDeptManager" resultType="String">
        select dept_manager
        from emp
                 join dept on emp.dept_id = dept.dept_id
        where emp_id = #{empId}
    </select>
    <select id="findParentDeptManager" resultType="String">
        SELECT parentDept.dept_manager
        FROM emp
                 JOIN dept currentDept
                      ON emp.dept_id = currentDept.dept_id
                 JOIN dept parentDept
                      ON currentDept.parent_deptId = parentDept.dept_id
        WHERE emp.emp_id = #{empId}
    </select>

    <select id="findTodayBirthdays" resultType="Birthday">
        select emp_id empId, ename eName, (select d.dept_name from dept d where d.dept_id = e.dept_id) deptName, (select j.job_name from job j where j.job_id = e.job_id) jobName
        from emp e
        where (MONTH(birthday) = #{solMonth} AND DAY(birthday) = #{solDay} AND e.birthday_type = '양력') or (MONTH(birthday) = #{lunMonth} AND DAY(birthday) = #{lunDay} AND e.birthday_type = '음력')
        order by e.ename;
    </select>
</mapper>

