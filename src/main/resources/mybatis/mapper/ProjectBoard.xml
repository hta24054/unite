<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hta2405.unite.mybatis.mapper.ProjectBoardMapper">
    <select id="getTaskCount" resultType="String">
        select task_subject from task where project_id = #{projectId} and emp_id = #{userid} ORDER BY COALESCE(task_update_date, task_date) DESC LIMIT 1;
    </select>
    <insert id="insertTask">
        insert into task (emp_id, project_id, task_subject, task_content, task_date, task_file_path, task_file_original, task_file_uuid, task_file_type, member_name, todo)
        values (#{userid}, #{projectId}, #{title}, #{content}, sysdate(), #{taskFile.filePath}, #{taskFile.fileOriginal}, #{taskFile.fileUUID}, #{taskFile.fileType}, #{name}, #{category})
    </insert>

    <update id="updateTask">
        update task set task_subject = #{title}, task_content = #{content}, task_date = sysdate(), todo = #{category},
                        task_file_path = #{taskFile.filePath}, task_file_original = #{taskFile.fileOriginal}, task_file_uuid = #{taskFile.fileUUID}, task_file_type = #{taskFile.fileType}
            where emp_id = #{userid} and project_id = #{projectId}
    </update>
    <select id="getRecentPosts" resultType="com.hta2405.unite.dto.ProjectTaskDTO">
        SELECT
            t.member_name AS taskWriter,
            IFNULL(t.task_subject, '글을 작성해주세요') AS taskSubject,
            SUBSTRING(COALESCE(t.task_update_date, t.task_date), 1, 10) AS taskDate,
            m.member_id AS memberId
        FROM
            project p
                JOIN
            project_member m ON p.project_id = m.project_id
                LEFT JOIN (
                SELECT
                    task_subject,
                    task_content,
                    project_id,
                    emp_id,
                    task_date,
                    task_update_date,
                    member_name,
                    ROW_NUMBER() OVER (
                        PARTITION BY emp_id
                        ORDER BY
                            (CASE WHEN task_update_date IS NULL THEN 1 ELSE 0 END),
                            task_update_date DESC,
                            (CASE WHEN task_date IS NULL THEN 1 ELSE 0 END),
                            task_date DESC
                        ) AS rn
                FROM
                    task
                WHERE
                    project_id = #{projectId}
            ) t ON p.project_id = t.project_id
                AND m.member_id = t.emp_id
                AND t.rn = 1
        WHERE
            p.project_id = #{projectId}
        ORDER BY
            t.member_name;
    </select>
    <select id="getTaskList" resultType="ProjectTask">
        select todo toDo, task_id taskId, emp_id memberId, project_id projectId, task_subject taskSubject, task_content taskContent, task_date taskDate, task_update_date taskUpdateDate, task_file_path taskFilePath, task_file_original taskFileOriginal, task_file_uuid taskFileUuid, task_file_type taskFileType, member_name memberName from task where project_id = #{projectId} and emp_id = #{userid} order by coalesce(task_update_date, task_date) desc
    </select>
    <select id="getTask" resultType="ProjectTask">
        select todo toDo, task_id taskId, emp_id memberId, project_id projectId, task_subject taskSubject, task_content taskContent, task_date taskDate, task_update_date taskUpdateDate, task_file_path taskFilePath, task_file_original taskFileOriginal, task_file_uuid taskFileUuid, task_file_type taskFileType, member_name memberName from task where project_id = #{projectId} and emp_id = #{userid} and task_id = #{taskId}
    </select>
    <delete id="deleteTask">
        delete from task where project_id=#{projectId} and emp_id=#{memberId} and task_id=#{taskId}
    </delete>
    <update id="modifyProcess" parameterType="map">
        update task set task_subject=#{board_subject}, task_content=#{board_content}, task_update_date = sysdate()
                    <if test="taskFile != null">
                            ,task_file_path = #{taskFile.filePath}, task_file_original = #{taskFile.fileOriginal}, task_file_uuid = #{taskFile.fileUUID}, task_file_type = #{taskFile.fileType}
                    </if>
                    <if test="taskFile == null">
                        ,task_file_path = "", task_file_original = "", task_file_uuid ="", task_file_type = ""
                    </if>
                    where project_id=#{projectId} and emp_id=#{memberId} and task_id=#{taskId}
    </update>
    <insert id="insertComment" parameterType="map" useGeneratedKeys="true" keyProperty="taskCommentId">
        INSERT INTO task_comment (task_comment_writer, task_id, task_comment_content,
                                  task_comment_date, task_comment_re_lev, task_comment_re_seq)
        VALUES (#{taskCommentWriter}, #{taskId}, #{taskCommentContent}, sysdate(), #{taskCommentReLev}, #{taskCommentReSeq})
    </insert>
    <insert id="replyAdd" parameterType="map" useGeneratedKeys="true" keyProperty="taskCommentId">
        INSERT INTO task_comment (task_comment_writer, task_id, task_comment_content,
                                  task_comment_date, task_comment_re_lev, task_comment_re_seq, task_comment_re_ref)
        VALUES (#{taskCommentWriter}, #{taskId}, #{taskCommentContent}, sysdate(), #{taskCommentReLev}, #{taskCommentReSeq}, #{taskCommentReRef})
    </insert>
    <update id="updateRef">
        update task_comment set task_comment_re_ref = #{ref} where task_comment_id = #{ref}
    </update>
    <select id="getListCount">
        select count(*) from task_comment where task_id = #{taskId}
    </select>
    <select id="getCommentList">
        select task_comment_id, task_comment_writer, task_comment_content, task_comment_date,
        task_comment_re_lev, task_comment_re_seq, task_comment_re_ref, emp.img_original, emp.ename eName
        from task_comment
        join emp on task_comment.task_comment_writer = emp.emp_id
        where task_id = #{taskId}
        <choose>
            <when test="state != 1">
                order by task_comment_re_ref desc, task_comment_re_seq
            </when>
            <otherwise>
                order by task_comment_re_ref, task_comment_re_seq
            </otherwise>
        </choose>
    </select>
    <update id="updateComment">
        update task_comment set task_comment_content = #{taskCommentContent} where task_comment_id = #{taskId}
    </update>
    <delete id="deleteComment">
        delete from task_comment where task_comment_id = #{taskId}
    </delete>
</mapper>